<%= form_with(model: prompt, local: true, html: { class: "form", multipart: true }) do |form| %>
  <% if prompt.errors.any? %>
    <div class="form__errors">
      <h3 class="text-danger">Please fix the following errors:</h3>
      <ul>
        <% prompt.errors.full_messages.each do |message| %>
          <li class="text-danger text-sm"><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form__group">
    <%= form.label :name, class: "form__label form__label--required" %>
    <%= form.text_field :name, class: "form__input", required: true, 
        placeholder: "e.g., Customer Support Response",
        data: { action: "input->slug-generator#generateSlug" } %>
    <div class="form__help">A descriptive name for this prompt</div>
  </div>

  <div class="form__group">
    <%= form.label :slug, class: "form__label form__label--required" %>
    <%= form.text_field :slug, class: "form__input", required: true, 
        placeholder: "e.g., customer-support-response",
        data: { "slug-generator-target": "slugField" } %>
    <div class="form__help">URL-friendly identifier (lowercase letters, numbers, and hyphens only)</div>
  </div>

  <div class="form__group">
    <%= form.label :description, class: "form__label" %>
    <%= form.text_area :description, class: "form__textarea", rows: 2,
        placeholder: "Brief description of what this prompt does" %>
  </div>

  <div class="form__group">
    <%= form.label :system_message, "System Message", class: "form__label" %>
    <%= form.text_area :system_message, class: "form__textarea", rows: 4,
        placeholder: "Instructions for the AI system (optional)" %>
    <div class="form__help">Sets the behavior and context for the AI</div>
  </div>

  <div class="form__group">
    <%= form.label :content, "Prompt Content", class: "form__label form__label--required" %>
    <%= form.text_area :content, class: "form__textarea", rows: 6, required: true,
        placeholder: "The main prompt content that will be sent to the AI",
        data: { action: "input->variable-detector#detectVariables" } %>
    <div class="form__help">The main prompt template. Use {{variable_name}} syntax for variables.</div>
  </div>

  <div id="parameters-section" class="parameters-section" style="display: none;">
    <h3 class="form__section-title">Parameters</h3>
    <div class="form__help mb-md">Configure the parameters detected in your prompt:</div>
    
    <div id="parameters-list" class="parameters-list">
      <!-- Parameters will be dynamically inserted here -->
    </div>
    
    <%= form.fields_for :parameters do |parameter_form| %>
      <div class="parameter-fields" style="display: none;">
        <%= parameter_form.hidden_field :id %>
        <%= parameter_form.hidden_field :_destroy %>
      </div>
    <% end %>
  </div>

  <div class="form__inline">
    <div class="form__group">
      <%= form.label :model, "AI Model", class: "form__label" %>
      <%= form.select :model, 
          options_for_select([
            ["GPT-4", "gpt-4"],
            ["GPT-4 Turbo", "gpt-4-turbo-preview"],
            ["GPT-3.5 Turbo", "gpt-3.5-turbo"],
            ["Claude 3 Opus", "claude-3-opus"],
            ["Claude 3 Sonnet", "claude-3-sonnet"],
            ["Claude 3 Haiku", "claude-3-haiku"]
          ], prompt.model),
          { include_blank: "Select a model" },
          class: "form__select" %>
    </div>

    <div class="form__group">
      <%= form.label :temperature, class: "form__label" %>
      <%= form.number_field :temperature, class: "form__input", 
          step: 0.1, min: 0, max: 2, placeholder: "0.7" %>
      <div class="form__help">0-2 (default: 0.7)</div>
    </div>

    <div class="form__group">
      <%= form.label :max_tokens, "Max Tokens", class: "form__label" %>
      <%= form.number_field :max_tokens, class: "form__input", 
          min: 1, placeholder: "500" %>
      <div class="form__help">Maximum response length</div>
    </div>
  </div>

  <div class="form__group">
    <%= form.label :status, class: "form__label" %>
    <%= form.select :status, 
        options_for_select([
          ["Draft", "draft"],
          ["Active", "active"],
          ["Archived", "archived"]
        ], prompt.status),
        {},
        class: "form__select" %>
  </div>

  <div class="form__actions">
    <%= link_to "Cancel", prompts_path, class: "btn btn--secondary btn--medium" %>
    <%= form.submit prompt.new_record? ? "Create Prompt" : "Update Prompt", 
        class: "btn btn--primary btn--medium" %>
  </div>
<% end %>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const contentField = document.querySelector('[data-action="input->variable-detector#detectVariables"]');
  const parametersSection = document.getElementById('parameters-section');
  const parametersList = document.getElementById('parameters-list');
  
  // Slug generation
  const nameField = document.querySelector('[data-action="input->slug-generator#generateSlug"]');
  const slugField = document.querySelector('[data-slug-generator-target="slugField"]');
  
  if (nameField && slugField) {
    function generateSlug() {
      // Only auto-generate if slug is empty or if it's a new record
      if (!slugField.value || <%= prompt.new_record? %>) {
        const slug = nameField.value
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
          .replace(/\s+/g, '-') // Replace spaces with hyphens
          .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
          .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
        slugField.value = slug;
      }
    }
    
    nameField.addEventListener('input', generateSlug);
  }
  
  // Store existing parameters data (for edit form)
  const existingParameters = <%= raw((prompt.persisted? ? prompt.parameters : []).map { |p| {
    name: p.name,
    description: p.description,
    parameter_type: p.parameter_type,
    required: p.required,
    default_value: p.default_value,
    id: p.id
  }}.to_json) %>;
  
  function detectVariables() {
    const content = contentField.value;
    const variablePattern = /\{\{([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)\}\}/g;
    const matches = [...content.matchAll(variablePattern)];
    const uniqueVariables = [...new Set(matches.map(match => match[1]))];
    
    if (uniqueVariables.length > 0) {
      parametersSection.style.display = 'block';
      updateParametersDisplay(uniqueVariables);
    } else {
      parametersSection.style.display = 'none';
    }
  }
  
  function updateParametersDisplay(variables) {
    parametersList.innerHTML = '';
    
    // Add fields for parameters that should be kept
    variables.forEach((variable, index) => {
      const existingParam = existingParameters.find(p => p.name === variable);
      const parameterItem = createParameterItem(variable, index, existingParam);
      parametersList.appendChild(parameterItem);
    });
    
    // Add hidden fields to destroy parameters that are no longer in content
    let destroyIndex = variables.length;
    existingParameters.forEach(param => {
      if (!variables.includes(param.name)) {
        const destroyField = document.createElement('div');
        destroyField.style.display = 'none';
        destroyField.innerHTML = `
          <input type="hidden" name="prompt[parameters_attributes][${destroyIndex}][id]" value="${param.id}">
          <input type="hidden" name="prompt[parameters_attributes][${destroyIndex}][_destroy]" value="1">
        `;
        parametersList.appendChild(destroyField);
        destroyIndex++;
      }
    });
  }
  
  function createParameterItem(variableName, index, existingData) {
    const div = document.createElement('div');
    div.className = 'parameter-item';
    div.innerHTML = `
      <div class="parameter-field">
        <label>Name</label>
        <span class="parameter-name">${variableName}</span>
        <input type="hidden" name="prompt[parameters_attributes][${index}][name]" value="${variableName}">
        ${existingData ? `<input type="hidden" name="prompt[parameters_attributes][${index}][id]" value="${existingData.id}">` : ''}
      </div>
      
      <div class="parameter-field">
        <label>Type</label>
        <select name="prompt[parameters_attributes][${index}][parameter_type]" class="form__select form__select--small">
          <option value="string" ${existingData?.parameter_type === 'string' ? 'selected' : ''}>String</option>
          <option value="number" ${existingData?.parameter_type === 'number' ? 'selected' : ''}>Number</option>
          <option value="boolean" ${existingData?.parameter_type === 'boolean' ? 'selected' : ''}>Boolean</option>
          <option value="array" ${existingData?.parameter_type === 'array' ? 'selected' : ''}>Array</option>
          <option value="object" ${existingData?.parameter_type === 'object' ? 'selected' : ''}>Object</option>
          <option value="file" ${existingData?.parameter_type === 'file' ? 'selected' : ''}>File</option>
        </select>
      </div>
      
      <div class="parameter-field">
        <label>Required</label>
        <div class="parameter-checkbox">
          <input type="hidden" name="prompt[parameters_attributes][${index}][required]" value="0">
          <input type="checkbox" 
                 name="prompt[parameters_attributes][${index}][required]" 
                 value="1"
                 ${existingData?.required !== false ? 'checked' : ''}>
        </div>
      </div>
      
      <div class="parameter-field">
        <label>Default Value</label>
        <input type="text" 
               name="prompt[parameters_attributes][${index}][default_value]" 
               class="form__input form__input--small"
               placeholder="Optional"
               value="${existingData?.default_value || ''}">
      </div>
      
      <div class="parameter-field">
        <label>Description</label>
        <input type="text" 
               name="prompt[parameters_attributes][${index}][description]" 
               class="form__input form__input--small"
               placeholder="Optional"
               value="${existingData?.description || ''}">
      </div>
    `;
    return div;
  }
  
  if (contentField) {
    contentField.addEventListener('input', detectVariables);
    // Detect variables on page load
    detectVariables();
  }
});
</script>